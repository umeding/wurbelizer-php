<?php
/**
 * PHP/Wurbelizer - a light-weight code generator for PHP.
 * The code is very much modeled after the original Java version with
 * a few PHP tweaks.
 * Copyright (c) 2007-2008 Uwe B. Meding, uwe@uwemeding.com
 *
 * Original copyright:
 *
 * Wurbelizer - a generic lightweight code generator.
 * Copyright (C) 2001-2006 Harald Krake, harald@krake.de, +49 7722 9508-0
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

require_once('WurbUtil.php');
require_once('SourceException.php');
require_once('AbstractWurbiler.php');


class DefaultWurbiler extends AbstractWurbiler {
    private $wrblname;
    private $outputDir;

    public function __construct($wrblfp, $wrblname, $out, $outputDir) {
	parent::__construct($wrblfp, $wrblname, $out, $outputDir);

	$this->wrblname = $wrblname;
	$this->outputDir = $outputDir;
    }

    public function compile() {

	$pos = last_index_of($this->wrblname, '/');
	if($pos == -1) {
	    $className = $this->wrblname;
	} else {
	    $className = substr($this->wrblname, $pos+1);
	}

	if(substr($className, -5) != WRBL_EXTENSION) {
	    throw new SourceException(".wrbl file extension missing");
	}
	$className = substr($className, 0, -5);

	$output_filename = $this->outputDir.'/'.$className.WRBL_EXTENSION.'.php';

	// gen up the code
	$errors = parent::compile();
	if($errors > 0) {
	    echo $this->wrblname.": $errors ".($errors==1?"error":"errors")." - no output created\n";
	    exit(1);
	}

	if(file_exists($output_filename)) {
	    unlink($output_filename);
	}
	$fp = fopen($output_filename, 'w');
	$this->createHeader($fp, $className);

	// add the generated content
	$gend = parent::getWriter();
        $stat = fstat($gend);
	fseek($gend, 0);
	$content = fread($gend, $stat['size']);
	fwrite($fp, $content);

	$this->createTrailer($fp);


	// serialize the source data
	$sources = parent::getSourceList();
	$args = parent::getArgs();
	$wdata = serialize(new WurbletData($sources, $args));
	$sources_filename = $this->outputDir.'/'.$className.FILE_SOURCE_EXTENSION;
	$fp = fopen($sources_filename, 'w');
	if($fp === FALSE) {
	    echo "Error: ".error_get_last()."\n";
	    exit(1);
	}
	fwrite($fp, $wdata);
	fclose($fp);
    }

    private function createHeader($fp, $className) {

	fwrite($fp, "<?php\n");
	fwrite($fp, "// wurblet generated by Wurbiler, see http://www.wurblizer.org for more details.\n\n");

	// add the default imports
	parent::handleImports(array("imports", "AbstractWurblet.php"));

	$pkgName = parent::getParentClass();
	if($pkgName === null) {
	    $pkgName = "AbstractWurblet";
	}
	parent::handleImports(array("imports", "$pkgName.php"));

	// write the imports into the source file.
	foreach(parent::getImports() as $import) {
	    fwrite($fp, "require_once('".$import."');\n");
	}
	fwrite($fp, "\n");
	fwrite($fp, "class $className extends $pkgName");

	$delim = " implements";
	foreach(parent::getInterfaces() as $iface) {
	    fwrite($fp, "$delim $iface");
	    $delim = ',';
	}
	fwrite($fp, " {\n");

	fwrite($fp, "  public function run() {\n");
	fwrite($fp, "    parent::run();\n\n");

    }

    private function createTrailer($fp) {
	fwrite($fp, "\n  }\n}\n?>\n");
    }

}

function print_usage($prog) {
    echo "Usage: $prog [-h|--help] [-d|--destdir <destination>] <filename>.wrbl\n";
}

function main($argv) {

    $argc = count($argv);
    for($i=1;$i<$argc;$i++) {
	switch($argv[$i]) {
	case '-d': case '--destdir':
	    $destdir = $argv[$i+1];
	    break;

	case '-h': case '--help':
	    print_usage($argv[0]);
	    exit(0);

	default:
	    if($argv[$i][0] == '-') {
		// illegal option
		echo "option ".$argv[$i]." illegal -- igored\n";
	    } else {
		$wrblname = $argv[$i];
	    }
	    break;
	}
    }

    if(isset($destdir)) {
	// make we have a trailing /
	$len = strlen($destdir);
	if($destdir[$len-1] != '/') {
	    $destdir .= '/';
	}
    } else {
	$destdir = './';
    }

    if(!file_exists($destdir)) {
	if(false == mkdir($destdir, 0755, true)) {
	    echo error_get_last()."\n";
	    exit(1);
	}
    } 
    if(!isset($wrblname)) {
	echo "wurbiler: no input file\n\n";
	print_usage($argv[0]);
	exit(1);
    }


    // create a fake output first
    $out = fopen('data://text/plain,', 'w+');

    $fp = fopen($wrblname, 'r');
    if($fp == null) {
	$error = error_get_last();
	echo $error['message']."\n";
	exit();
    }

   

    $dw = new DefaultWurbiler($fp, $wrblname, $out, $destdir);
    $dw->compile();

    fclose($out);


}

?>
